{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","handleEditorChange","event","setState","markdown","target","value","handlePreviewDropDownChange","displayPreview","handleClearPreviewClick","handleFileInputSubmit","a","async","file","fileInput","current","files","readFile","readResult","fileList","Promise","resolve","reject","fileReader","FileReader","onload","result","onerror","readAsText","state","React","createRef","className","type","onClick","this","Input","ref","onChange","parsedHTML","class","Component","Header","children","Editor","PreviewDropDown","Preview","dangerouslySetInnerHTML","__html","marked","breaks","Button","forwardRef","for","id","Boolean","window","location","hostname","match","element","createElement","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c3769d58.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport { findByLabelText } from \"@testing-library/react\";\r\nimport marked, { parser } from \"marked\";\r\n\r\nconst defaultText = `## Markdown\r\n\r\n[Markdown](https://en.wikipedia.org/wiki/Markdown) is a markup language that emphasizes _simplicity_ and _readability_.\r\n\r\n> Markdown strives to be readable even as it marks up text.\r\n> It does so by ditching tags for less intrusive markup syntax.\r\n> This page is a live playground to convert your markdown into html.\r\n\r\n## How to Use this Markdown Previewer?\r\n- Write markdown in the editor and see the html rendered live in the previewer.\r\n- Have a markdown file you want to preview? Click 'upload file' to upload its contents to the editor.\r\n- You can also view the source html by clicking on the dropdown menu above the previewer.\r\n\r\n## Some Markdown Features:\r\n\r\n1. Display Code\r\n\r\n\t* You can seamlessly \\`console.log('display inline code')\\`\r\n\t  or multi-line code blocks: \r\n  \\`\\`\\`\r\n  \t\tfunction square(a) {  \r\n\r\n\t  \t\t(return a*a) \r\n\r\n\t \t\t}\t\r\n \\`\\`\\`\r\n\r\n2. Make lists composed of:\r\n\r\n\t- bullets\r\n\t\t- indents\r\n\t1. or numbers\r\n\r\n3. You can also embed images:\r\n\r\n \t![alt text](https://cdn4.iconfinder.com/data/icons/logos-and-brands-1/512/205_Markdown_logo_logos-512.png \" Markdown logo\")\r\n \r\n_default text in this editor based on [Marked Live Demo](https://marked.js.org/demo/)_`;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      markdown: defaultText,\r\n      displayPreview: \"live\"\r\n    };\r\n\r\n    this.fileInput = React.createRef();\r\n  }\r\n\r\n  handleEditorChange = event => {\r\n    this.setState({ markdown: event.target.value });\r\n  };\r\n\r\n  handlePreviewDropDownChange = event => {\r\n    this.setState({ displayPreview: event.target.value });\r\n   \r\n  };\r\n\r\n  handleClearPreviewClick = event => {\r\n    this.setState({ markdown: \"\" });\r\n  };\r\n\r\n  handleFileInputSubmit = async event => {\r\n    /*event handler for  <input type = \"file\">, sets state of markdown with value of readFile()*/\r\n\r\n    const file = this.fileInput.current.files[0];\r\n    let readResult = await this.readFile(file);\r\n    this.setState({ markdown: readResult });\r\n  };\r\n\r\n  readFile = fileList => {\r\n    /* returns a promise of a string of the file's text\"*/\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let fileReader = new FileReader();\r\n\r\n      fileReader.onload = () => resolve(fileReader.result);\r\n\r\n      fileReader.onerror = function() {\r\n        reject(\"there was an error reading the file\");\r\n      };\r\n\r\n      fileReader.readAsText(fileList);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"container-header-editor\">\r\n          <Header className=\"title-editor\">Markdown Editor</Header>\r\n          <Button\r\n            type=\"button\"\r\n            onClick={this.handleClearPreviewClick}\r\n            className=\"clearButton\"\r\n          >\r\n            Clear\r\n          </Button>\r\n          <Input\r\n            ref={this.fileInput}\r\n            onChange={this.handleFileInputSubmit}\r\n            className=\"fileInput\"\r\n          >\r\n            Upload File\r\n          </Input>\r\n        </div>\r\n        <Header className=\"title-preview\">Markdown Previewer</Header>\r\n        <PreviewDropDown\r\n          value={this.state.displayPreview}\r\n          onChange={this.handlePreviewDropDownChange}\r\n          type=\"select\"\r\n          className=\"previewDropdown\"\r\n        ></PreviewDropDown>\r\n        <Editor\r\n          value={this.state.markdown}\r\n          onChange={this.handleEditorChange}\r\n          className=\"editor\"\r\n        ></Editor>\r\n        <Preview\r\n          displayPreview={this.state.displayPreview}\r\n          parsedHTML={this.state.markdown}\r\n          className=\"preview\"\r\n        />\r\n\r\n        <div class=\"footer\">Markdown previewer created by awm</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst Header = props => {\r\n  const { className, children } = props;\r\n  return <div className={className}>{children}</div>;\r\n};\r\n\r\nconst Editor = props => {\r\n  const { value, onChange, className, children } = props;\r\n  return (\r\n    <textarea\r\n      value={value}\r\n      onChange={onChange}\r\n      className={className}\r\n    ></textarea>\r\n  );\r\n};\r\n\r\nconst PreviewDropDown = props => {\r\n  const { value, onChange, className } = props;\r\n  return (\r\n    <form className={className}>\r\n      <select value={value} onChange={onChange}>\r\n        <option value=\"live\">Live Preview</option>\r\n        <option value=\"html\">HTML Source</option>\r\n      </select>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst Preview = props => {\r\n  const { displayPreview, parsedHTML, className } = props;\r\n  return (\r\n    /*utilizes conitional rendering to switch between rendered html and raw html*/\r\n    <div className={className}>\r\n      {displayPreview == \"live\" ? (\r\n        <div\r\n          dangerouslySetInnerHTML={{\r\n            __html: marked(parsedHTML, { breaks: \"true\" })\r\n          }}\r\n        />\r\n      ) : (\r\n        <div>{marked(parsedHTML, { breaks: \"true\" })}</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Button = props => {\r\n  const { type, onClick, className, children } = props;\r\n  return (\r\n    <button type={type} onClick={onClick} className={className}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst Input = React.forwardRef((props, ref) => (\r\n  <div className={props.className}>\r\n    <label for=\"file\">{props.children}</label>\r\n    <input type=\"file\" id=\"file\" ref={ref} onChange={props.onChange} />\r\n  </div>\r\n));\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nvar element = React.createElement(App);\r\n\r\nReactDOM.render(element, document.getElementById('root'));\r\n\r\n//Hot Module Replacement - a tool for reloading application without refreshing. \r\nif (module.hot){\r\n    module.hot.accept();\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}